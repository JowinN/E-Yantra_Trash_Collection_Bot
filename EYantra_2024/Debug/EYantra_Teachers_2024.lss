
EYTRC_1069.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000137c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080020e  0080020e  0000141e  2**0
                  ALLOC
  3 .stab         000016c8  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b66  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002cf  00000000  00000000  00004bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000860  00000000  00000000  00004e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000056e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000524  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011fc  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_5>
      18:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_6>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      94:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      b8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      c8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      cc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      d8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      dc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      e4:	a3 03       	fmuls	r18, r19
      e6:	43 04       	cpc	r4, r3
      e8:	6a 04       	cpc	r6, r10
      ea:	8d 03       	fmulsu	r16, r21
      ec:	8d 03       	fmulsu	r16, r21
      ee:	d1 04       	cpc	r13, r1
      f0:	91 04       	cpc	r9, r1
      f2:	dc 03       	fmulsu	r21, r20
      f4:	98 03       	fmulsu	r17, r16
      f6:	98 03       	fmulsu	r17, r16
      f8:	1c 04       	cpc	r1, r12
      fa:	11 05       	cpc	r17, r1
      fc:	8d 03       	fmulsu	r16, r21
      fe:	8d 03       	fmulsu	r16, r21
     100:	38 05       	cpc	r19, r8
     102:	6f 05       	cpc	r22, r15
     104:	a6 05       	cpc	r26, r6
     106:	a3 03       	fmuls	r18, r19
     108:	dd 05       	cpc	r29, r13

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d1 e2       	ldi	r29, 0x21	; 33
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0c bf       	out	0x3c, r16	; 60

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	ec e7       	ldi	r30, 0x7C	; 124
     122:	f3 e1       	ldi	r31, 0x13	; 19
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	ae 30       	cpi	r26, 0x0E	; 14
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	12 e0       	ldi	r17, 0x02	; 2
     136:	ae e0       	ldi	r26, 0x0E	; 14
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a4 33       	cpi	r26, 0x34	; 52
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 98 07 	call	0xf30	; 0xf30 <main>
     148:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <buzzer_on>:
// }

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     150:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     152:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     154:	88 b9       	out	0x08, r24	; 8
}
     156:	08 95       	ret

00000158 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     158:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     15a:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     15c:	88 b9       	out	0x08, r24	; 8
     15e:	08 95       	ret

00000160 <velocity>:
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     160:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     164:	60 93 2a 01 	sts	0x012A, r22
}
     168:	08 95       	ret

0000016a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16a:	86 e6       	ldi	r24, 0x66	; 102
     16c:	9e e0       	ldi	r25, 0x0E	; 14
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcd_set_4bit+0x4>
     172:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     174:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     176:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     178:	80 e3       	ldi	r24, 0x30	; 48
     17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	ef ef       	ldi	r30, 0xFF	; 255
     180:	f7 e4       	ldi	r31, 0x47	; 71
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x18>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x1e>
     188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x26>
     194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     19a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     19c:	42 9a       	sbi	0x08, 2	; 8
     19e:	ef ef       	ldi	r30, 0xFF	; 255
     1a0:	f7 e4       	ldi	r31, 0x47	; 71
     1a2:	31 97       	sbiw	r30, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x38>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x3e>
     1a8:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1aa:	42 98       	cbi	0x08, 2	; 8
     1ac:	e6 e6       	ldi	r30, 0x66	; 102
     1ae:	fe e0       	ldi	r31, 0x0E	; 14
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x46>
     1b4:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1bc:	42 9a       	sbi	0x08, 2	; 8
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	97 e4       	ldi	r25, 0x47	; 71
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_set_4bit+0x58>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_set_4bit+0x5e>
     1c8:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	e6 e6       	ldi	r30, 0x66	; 102
     1ce:	fe e0       	ldi	r31, 0x0E	; 14
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_set_4bit+0x66>
     1d4:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	97 e4       	ldi	r25, 0x47	; 71
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x7a>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x80>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8

	
}
     1ee:	08 95       	ret

000001f0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	9f 70       	andi	r25, 0x0F	; 15
     1f4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1f6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1f8:	28 2f       	mov	r18, r24
     1fa:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1fc:	92 2b       	or	r25, r18
     1fe:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     200:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     202:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	ef ef       	ldi	r30, 0xFF	; 255
     208:	f7 e4       	ldi	r31, 0x47	; 71
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_wr_command+0x1a>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_wr_command+0x20>
     210:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     212:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     214:	98 b1       	in	r25, 0x08	; 8
     216:	9f 70       	andi	r25, 0x0F	; 15
     218:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     21a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     21c:	82 95       	swap	r24
     21e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     220:	89 2b       	or	r24, r25
     222:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     224:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     226:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     228:	42 9a       	sbi	0x08, 2	; 8
     22a:	8f ef       	ldi	r24, 0xFF	; 255
     22c:	97 e4       	ldi	r25, 0x47	; 71
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcd_wr_command+0x3e>
     232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_wr_command+0x44>
     234:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     23a:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_set_4bit>
     23e:	86 e6       	ldi	r24, 0x66	; 102
     240:	9e e0       	ldi	r25, 0x0E	; 14
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x8>
     246:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     248:	88 e2       	ldi	r24, 0x28	; 40
     24a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x01);
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x06);
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     25a:	8e e0       	ldi	r24, 0x0E	; 14
     25c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
	lcd_wr_command(0x80);
     260:	80 e8       	ldi	r24, 0x80	; 128
     262:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
		
}
     266:	08 95       	ret

00000268 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	9f 70       	andi	r25, 0x0F	; 15
     26c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     26e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     270:	28 2f       	mov	r18, r24
     272:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     274:	92 2b       	or	r25, r18
     276:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     278:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     27a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     27c:	42 9a       	sbi	0x08, 2	; 8
     27e:	ef ef       	ldi	r30, 0xFF	; 255
     280:	f7 e4       	ldi	r31, 0x47	; 71
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_wr_char+0x1a>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_wr_char+0x20>
     288:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     28a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     28c:	98 b1       	in	r25, 0x08	; 8
     28e:	9f 70       	andi	r25, 0x0F	; 15
     290:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     292:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     294:	82 95       	swap	r24
     296:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     298:	89 2b       	or	r24, r25
     29a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     29c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     29e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2a0:	42 9a       	sbi	0x08, 2	; 8
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	97 e4       	ldi	r25, 0x47	; 71
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_wr_char+0x3e>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_wr_char+0x44>
     2ac:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ae:	42 98       	cbi	0x08, 2	; 8
}
     2b0:	08 95       	ret

000002b2 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
}
     2b8:	08 95       	ret

000002ba <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
	while(*str != '\0')
     2c0:	88 81       	ld	r24, Y
     2c2:	88 23       	and	r24, r24
     2c4:	31 f0       	breq	.+12     	; 0x2d2 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     2c6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2c8:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     2cc:	89 91       	ld	r24, Y+
     2ce:	88 23       	and	r24, r24
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	79 f0       	breq	.+30     	; 0x2fa <lcd_cursor+0x22>
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	18 f4       	brcc	.+6      	; 0x2e6 <lcd_cursor+0xe>
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	c9 f4       	brne	.+50     	; 0x316 <lcd_cursor+0x3e>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <lcd_cursor+0x18>
     2e6:	83 30       	cpi	r24, 0x03	; 3
     2e8:	69 f0       	breq	.+26     	; 0x304 <lcd_cursor+0x2c>
     2ea:	84 30       	cpi	r24, 0x04	; 4
     2ec:	a1 f4       	brne	.+40     	; 0x316 <lcd_cursor+0x3e>
     2ee:	0f c0       	rjmp	.+30     	; 0x30e <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2f0:	86 2f       	mov	r24, r22
     2f2:	81 58       	subi	r24, 0x81	; 129
     2f4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     2f8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2fa:	86 2f       	mov	r24, r22
     2fc:	81 54       	subi	r24, 0x41	; 65
     2fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     302:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     304:	86 2f       	mov	r24, r22
     306:	8d 56       	subi	r24, 0x6D	; 109
     308:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     30c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     30e:	86 2f       	mov	r24, r22
     310:	8d 52       	subi	r24, 0x2D	; 45
     312:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_wr_command>
     316:	08 95       	ret

00000318 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	8a 01       	movw	r16, r20
     322:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     324:	88 23       	and	r24, r24
     326:	11 f0       	breq	.+4      	; 0x32c <lcd_print+0x14>
     328:	66 23       	and	r22, r22
     32a:	19 f4       	brne	.+6      	; 0x332 <lcd_print+0x1a>
	{
		lcd_home();
     32c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_home>
     330:	02 c0       	rjmp	.+4      	; 0x336 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     332:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     336:	c5 30       	cpi	r28, 0x05	; 5
     338:	d1 05       	cpc	r29, r1
     33a:	71 f4       	brne	.+28     	; 0x358 <lcd_print+0x40>
	{
		million=value/10000+48;
     33c:	c8 01       	movw	r24, r16
     33e:	60 e1       	ldi	r22, 0x10	; 16
     340:	77 e2       	ldi	r23, 0x27	; 39
     342:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     346:	cb 01       	movw	r24, r22
     348:	c0 96       	adiw	r24, 0x30	; 48
     34a:	90 93 26 02 	sts	0x0226, r25
     34e:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(million);
     352:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
     356:	03 c0       	rjmp	.+6      	; 0x35e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     358:	c4 30       	cpi	r28, 0x04	; 4
     35a:	d1 05       	cpc	r29, r1
     35c:	b9 f4       	brne	.+46     	; 0x38c <lcd_print+0x74>
	{
		temp = value/1000;
     35e:	c8 01       	movw	r24, r16
     360:	68 ee       	ldi	r22, 0xE8	; 232
     362:	73 e0       	ldi	r23, 0x03	; 3
     364:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     368:	cb 01       	movw	r24, r22
     36a:	70 93 28 02 	sts	0x0228, r23
     36e:	60 93 27 02 	sts	0x0227, r22
		thousand = temp%10 + 48;
     372:	6a e0       	ldi	r22, 0x0A	; 10
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     37a:	c0 96       	adiw	r24, 0x30	; 48
     37c:	90 93 33 02 	sts	0x0233, r25
     380:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(thousand);
     384:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
		flag=1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	01 c0       	rjmp	.+2      	; 0x38e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     38c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     38e:	c3 30       	cpi	r28, 0x03	; 3
     390:	d1 05       	cpc	r29, r1
     392:	11 f0       	breq	.+4      	; 0x398 <lcd_print+0x80>
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	b1 f4       	brne	.+44     	; 0x3c4 <lcd_print+0xac>
	{
		temp = value/100;
     398:	c8 01       	movw	r24, r16
     39a:	64 e6       	ldi	r22, 0x64	; 100
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     3a2:	cb 01       	movw	r24, r22
     3a4:	70 93 28 02 	sts	0x0228, r23
     3a8:	60 93 27 02 	sts	0x0227, r22
		hundred = temp%10 + 48;
     3ac:	6a e0       	ldi	r22, 0x0A	; 10
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     3b4:	c0 96       	adiw	r24, 0x30	; 48
     3b6:	90 93 2f 02 	sts	0x022F, r25
     3ba:	80 93 2e 02 	sts	0x022E, r24
		lcd_wr_char(hundred);
     3be:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
		flag=1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     3c4:	c2 30       	cpi	r28, 0x02	; 2
     3c6:	d1 05       	cpc	r29, r1
     3c8:	11 f0       	breq	.+4      	; 0x3ce <lcd_print+0xb6>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	b1 f4       	brne	.+44     	; 0x3fa <lcd_print+0xe2>
	{
		temp = value/10;
     3ce:	2a e0       	ldi	r18, 0x0A	; 10
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	c8 01       	movw	r24, r16
     3d4:	b9 01       	movw	r22, r18
     3d6:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     3da:	cb 01       	movw	r24, r22
     3dc:	70 93 28 02 	sts	0x0228, r23
     3e0:	60 93 27 02 	sts	0x0227, r22
		tens = temp%10 + 48;
     3e4:	b9 01       	movw	r22, r18
     3e6:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     3ea:	c0 96       	adiw	r24, 0x30	; 48
     3ec:	90 93 2c 02 	sts	0x022C, r25
     3f0:	80 93 2b 02 	sts	0x022B, r24
		lcd_wr_char(tens);
     3f4:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
		flag=1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3fa:	c1 30       	cpi	r28, 0x01	; 1
     3fc:	d1 05       	cpc	r29, r1
     3fe:	11 f0       	breq	.+4      	; 0x404 <lcd_print+0xec>
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	61 f4       	brne	.+24     	; 0x41c <lcd_print+0x104>
	{
		unit = value%10 + 48;
     404:	c8 01       	movw	r24, r16
     406:	6a e0       	ldi	r22, 0x0A	; 10
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodhi4>
     40e:	c0 96       	adiw	r24, 0x30	; 48
     410:	90 93 31 02 	sts	0x0231, r25
     414:	80 93 30 02 	sts	0x0230, r24
		lcd_wr_char(unit);
     418:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
	}
	if(digits>5)
     41c:	c6 30       	cpi	r28, 0x06	; 6
     41e:	d1 05       	cpc	r29, r1
     420:	1c f0       	brlt	.+6      	; 0x428 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     422:	85 e4       	ldi	r24, 0x45	; 69
     424:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_char>
	}
	
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret

00000432 <adc_pin_config>:
 
//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     432:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     434:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     436:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     43a:	10 92 08 01 	sts	0x0108, r1
}
     43e:	08 95       	ret

00000440 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     440:	ea e7       	ldi	r30, 0x7A	; 122
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     446:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     44a:	80 e2       	ldi	r24, 0x20	; 32
     44c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     450:	80 e8       	ldi	r24, 0x80	; 128
     452:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     454:	86 e8       	ldi	r24, 0x86	; 134
     456:	80 83       	st	Z, r24
}
     458:	08 95       	ret

0000045a <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     45a:	88 30       	cpi	r24, 0x08	; 8
     45c:	18 f0       	brcs	.+6      	; 0x464 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     45e:	98 e0       	ldi	r25, 0x08	; 8
     460:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     464:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     466:	80 62       	ori	r24, 0x20	; 32
     468:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     46c:	ea e7       	ldi	r30, 0x7A	; 122
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	80 64       	ori	r24, 0x40	; 64
     474:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     476:	80 81       	ld	r24, Z
     478:	84 ff       	sbrs	r24, 4
     47a:	fd cf       	rjmp	.-6      	; 0x476 <ADC_Conversion+0x1c>
	a=ADCH;
     47c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     480:	ea e7       	ldi	r30, 0x7A	; 122
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	90 81       	ld	r25, Z
     486:	90 61       	ori	r25, 0x10	; 16
     488:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     48a:	10 92 7b 00 	sts	0x007B, r1
	return a;
     48e:	08 95       	ret

00000490 <check_garbage_left>:
const unsigned char ir_threshold=125;
unsigned char left_ir,right_ir;

//checking left garbage
int check_garbage_left(){
	left_ir=ADC_Conversion(4);
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     496:	80 93 2a 02 	sts	0x022A, r24
	if(left_ir<ir_threshold){
		return 1;
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	8d 37       	cpi	r24, 0x7D	; 125
     4a0:	10 f0       	brcs	.+4      	; 0x4a6 <check_garbage_left+0x16>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		return 0;
	}
}
     4a6:	82 2f       	mov	r24, r18
     4a8:	93 2f       	mov	r25, r19
     4aa:	08 95       	ret

000004ac <check_garbage_right>:

//checking right garbage
int check_garbage_right(){
	right_ir=ADC_Conversion(8);
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     4b2:	80 93 2d 02 	sts	0x022D, r24
	if(right_ir<ir_threshold){
		return 1;
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	8d 37       	cpi	r24, 0x7D	; 125
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <check_garbage_right+0x16>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		return 0;
	}
     4c2:	82 2f       	mov	r24, r18
     4c4:	93 2f       	mov	r25, r19
     4c6:	08 95       	ret

000004c8 <check_line>:
#include "garbage_detection.h"


int check_line(){
	if(!(Left_black_line<0x42)&&!(Right_black_line<0x42)){
     4c8:	80 91 22 02 	lds	r24, 0x0222
     4cc:	82 34       	cpi	r24, 0x42	; 66
     4ce:	48 f0       	brcs	.+18     	; 0x4e2 <check_line+0x1a>
#include "garbage_detection.h"


int check_line(){
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	20 91 20 02 	lds	r18, 0x0220
     4d8:	22 34       	cpi	r18, 0x42	; 66
     4da:	28 f4       	brcc	.+10     	; 0x4e6 <check_line+0x1e>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret
	if(!(Left_black_line<0x42)&&!(Right_black_line<0x42)){
		return 1;
	}
	else{
		return 0;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     4e6:	08 95       	ret

000004e8 <func_init>:

void func_init(void){
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
	if(!(Left_black_line<0x42)&&!(Right_black_line<0x42)){
     4f0:	80 91 22 02 	lds	r24, 0x0222
     4f4:	82 34       	cpi	r24, 0x42	; 66
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <func_init+0x12>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <func_init+0x10e>
     4fa:	80 91 20 02 	lds	r24, 0x0220
     4fe:	82 34       	cpi	r24, 0x42	; 66
     500:	08 f4       	brcc	.+2      	; 0x504 <func_init+0x1c>
     502:	79 c0       	rjmp	.+242    	; 0x5f6 <func_init+0x10e>
		buzzer_on();
     504:	c8 ea       	ldi	r28, 0xA8	; 168
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	fe 01       	movw	r30, r28
     50a:	19 95       	eicall
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	a1 e1       	ldi	r26, 0x11	; 17
     512:	81 50       	subi	r24, 0x01	; 1
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	a0 40       	sbci	r26, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <func_init+0x2a>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <func_init+0x34>
     51c:	00 00       	nop
		_delay_ms(400);
		buzzer_off();
     51e:	0c ea       	ldi	r16, 0xAC	; 172
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	f8 01       	movw	r30, r16
     524:	19 95       	eicall
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	a1 e1       	ldi	r26, 0x11	; 17
     52c:	81 50       	subi	r24, 0x01	; 1
     52e:	90 40       	sbci	r25, 0x00	; 0
     530:	a0 40       	sbci	r26, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <func_init+0x44>
     534:	00 c0       	rjmp	.+0      	; 0x536 <func_init+0x4e>
     536:	00 00       	nop
		_delay_ms(400);
		buzzer_on();
     538:	fe 01       	movw	r30, r28
     53a:	19 95       	eicall
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	a1 e1       	ldi	r26, 0x11	; 17
     542:	81 50       	subi	r24, 0x01	; 1
     544:	90 40       	sbci	r25, 0x00	; 0
     546:	a0 40       	sbci	r26, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <func_init+0x5a>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <func_init+0x64>
     54c:	00 00       	nop
		_delay_ms(400);
		buzzer_off();
     54e:	f8 01       	movw	r30, r16
     550:	19 95       	eicall
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255
     556:	a1 e1       	ldi	r26, 0x11	; 17
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	90 40       	sbci	r25, 0x00	; 0
     55c:	a0 40       	sbci	r26, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <func_init+0x70>
     560:	00 c0       	rjmp	.+0      	; 0x562 <func_init+0x7a>
     562:	00 00       	nop
		_delay_ms(400);
		buzzer_on();
     564:	fe 01       	movw	r30, r28
     566:	19 95       	eicall
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	9f ef       	ldi	r25, 0xFF	; 255
     56c:	a3 e2       	ldi	r26, 0x23	; 35
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	90 40       	sbci	r25, 0x00	; 0
     572:	a0 40       	sbci	r26, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <func_init+0x86>
     576:	00 c0       	rjmp	.+0      	; 0x578 <func_init+0x90>
     578:	00 00       	nop
		_delay_ms(800);
		buzzer_off();
     57a:	f8 01       	movw	r30, r16
     57c:	19 95       	eicall
		velocity(200, 200);
     57e:	88 ec       	ldi	r24, 0xC8	; 200
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	68 ec       	ldi	r22, 0xC8	; 200
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		forward();
     58a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
		flag2 = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 1f 02 	sts	0x021F, r25
     596:	80 93 1e 02 	sts	0x021E, r24
		while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     59a:	80 91 20 02 	lds	r24, 0x0220
     59e:	85 31       	cpi	r24, 0x15	; 21
     5a0:	08 f1       	brcs	.+66     	; 0x5e4 <func_init+0xfc>
     5a2:	80 91 21 02 	lds	r24, 0x0221
     5a6:	85 31       	cpi	r24, 0x15	; 21
     5a8:	e8 f0       	brcs	.+58     	; 0x5e4 <func_init+0xfc>
     5aa:	80 91 22 02 	lds	r24, 0x0222
     5ae:	85 31       	cpi	r24, 0x15	; 21
     5b0:	c8 f0       	brcs	.+50     	; 0x5e4 <func_init+0xfc>
			Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     5b8:	80 93 22 02 	sts	0x0222, r24
			Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     5c2:	80 93 21 02 	sts	0x0221, r24
			Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     5cc:	80 93 20 02 	sts	0x0220, r24
		_delay_ms(800);
		buzzer_off();
		velocity(200, 200);
		forward();
		flag2 = 1;
		while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     5d0:	85 31       	cpi	r24, 0x15	; 21
     5d2:	40 f0       	brcs	.+16     	; 0x5e4 <func_init+0xfc>
     5d4:	80 91 21 02 	lds	r24, 0x0221
     5d8:	85 31       	cpi	r24, 0x15	; 21
     5da:	20 f0       	brcs	.+8      	; 0x5e4 <func_init+0xfc>
     5dc:	80 91 22 02 	lds	r24, 0x0222
     5e0:	85 31       	cpi	r24, 0x15	; 21
     5e2:	38 f7       	brcc	.-50     	; 0x5b2 <func_init+0xca>
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	9f eb       	ldi	r25, 0xBF	; 191
     5e8:	a6 e0       	ldi	r26, 0x06	; 6
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	a0 40       	sbci	r26, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <func_init+0x102>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <func_init+0x10c>
     5f4:	00 00       	nop
	else{
		//while(check_line()==0);
		//_delay_ms(2500);
	}

}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	08 95       	ret

00000600 <fnode>:

void fnode(){
	
	velocity(speed,speed);
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	6f ef       	ldi	r22, 0xFF	; 255
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
	forward();
     60c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
	flag2 = 1;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 1f 02 	sts	0x021F, r25
     618:	80 93 1e 02 	sts	0x021E, r24
	while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     61c:	80 91 20 02 	lds	r24, 0x0220
     620:	85 31       	cpi	r24, 0x15	; 21
     622:	08 f1       	brcs	.+66     	; 0x666 <fnode+0x66>
     624:	80 91 21 02 	lds	r24, 0x0221
     628:	85 31       	cpi	r24, 0x15	; 21
     62a:	e8 f0       	brcs	.+58     	; 0x666 <fnode+0x66>
     62c:	80 91 22 02 	lds	r24, 0x0222
     630:	85 31       	cpi	r24, 0x15	; 21
     632:	c8 f0       	brcs	.+50     	; 0x666 <fnode+0x66>
		Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     63a:	80 93 22 02 	sts	0x0222, r24
		Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     644:	80 93 21 02 	sts	0x0221, r24
		Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     64e:	80 93 20 02 	sts	0x0220, r24
void fnode(){
	
	velocity(speed,speed);
	forward();
	flag2 = 1;
	while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     652:	85 31       	cpi	r24, 0x15	; 21
     654:	40 f0       	brcs	.+16     	; 0x666 <fnode+0x66>
     656:	80 91 21 02 	lds	r24, 0x0221
     65a:	85 31       	cpi	r24, 0x15	; 21
     65c:	20 f0       	brcs	.+8      	; 0x666 <fnode+0x66>
     65e:	80 91 22 02 	lds	r24, 0x0222
     662:	85 31       	cpi	r24, 0x15	; 21
     664:	38 f7       	brcc	.-50     	; 0x634 <fnode+0x34>
     666:	08 95       	ret

00000668 <bit_forward>:
	}
	
}

void bit_forward(){
	velocity(speed,speed);
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	6f ef       	ldi	r22, 0xFF	; 255
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
	forward();
     674:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
	
	while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     678:	80 91 20 02 	lds	r24, 0x0220
     67c:	85 31       	cpi	r24, 0x15	; 21
     67e:	08 f1       	brcs	.+66     	; 0x6c2 <bit_forward+0x5a>
     680:	80 91 21 02 	lds	r24, 0x0221
     684:	85 31       	cpi	r24, 0x15	; 21
     686:	e8 f0       	brcs	.+58     	; 0x6c2 <bit_forward+0x5a>
     688:	80 91 22 02 	lds	r24, 0x0222
     68c:	85 31       	cpi	r24, 0x15	; 21
     68e:	c8 f0       	brcs	.+50     	; 0x6c2 <bit_forward+0x5a>
		Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     696:	80 93 22 02 	sts	0x0222, r24
		Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     6a0:	80 93 21 02 	sts	0x0221, r24
		Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     6aa:	80 93 20 02 	sts	0x0220, r24

void bit_forward(){
	velocity(speed,speed);
	forward();
	
	while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     6ae:	85 31       	cpi	r24, 0x15	; 21
     6b0:	40 f0       	brcs	.+16     	; 0x6c2 <bit_forward+0x5a>
     6b2:	80 91 21 02 	lds	r24, 0x0221
     6b6:	85 31       	cpi	r24, 0x15	; 21
     6b8:	20 f0       	brcs	.+8      	; 0x6c2 <bit_forward+0x5a>
     6ba:	80 91 22 02 	lds	r24, 0x0222
     6be:	85 31       	cpi	r24, 0x15	; 21
     6c0:	38 f7       	brcc	.-50     	; 0x690 <bit_forward+0x28>
     6c2:	86 e6       	ldi	r24, 0x66	; 102
     6c4:	96 e8       	ldi	r25, 0x86	; 134
     6c6:	a6 e0       	ldi	r26, 0x06	; 6
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	a0 40       	sbci	r26, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <bit_forward+0x60>
		Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
		Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
		Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
	}
	_delay_ms(145);
}
     6d0:	08 95       	ret

000006d2 <node>:

void node(){
	stop();
     6d2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
	buzzer_on();
     6d6:	0e 94 a8 00 	call	0x150	; 0x150 <buzzer_on>
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	ac e2       	ldi	r26, 0x2C	; 44
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	a0 40       	sbci	r26, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <node+0xe>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <node+0x18>
     6ea:	00 00       	nop
	_delay_ms(1000);
	buzzer_off();
     6ec:	0e 94 ac 00 	call	0x158	; 0x158 <buzzer_off>
	flag2 = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	90 93 1f 02 	sts	0x021F, r25
     6f8:	80 93 1e 02 	sts	0x021E, r24
	
}
     6fc:	08 95       	ret

000006fe <choice>:

int node_dust =0;

void choice(int k) {
	switch(k) {
     6fe:	fc 01       	movw	r30, r24
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	e3 31       	cpi	r30, 0x13	; 19
     704:	f1 05       	cpc	r31, r1
     706:	08 f0       	brcs	.+2      	; 0x70a <choice+0xc>
     708:	5b c2       	rjmp	.+1206   	; 0xbc0 <choice+0x4c2>
     70a:	ee 58       	subi	r30, 0x8E	; 142
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	05 90       	lpm	r0, Z+
     714:	f4 91       	lpm	r31, Z
     716:	e0 2d       	mov	r30, r0
     718:	19 94       	eijmp
		case 4:
		case 5:
		case 13:
		case 14:
		velocity(speed,speed);
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	6f ef       	ldi	r22, 0xFF	; 255
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		soft_left_degrees(turning_angle);
     726:	8d e4       	ldi	r24, 0x4D	; 77
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 92 06 	call	0xd24	; 0xd24 <soft_left_degrees>
		break;
     72e:	08 95       	ret

		case 9:
		case 10:
		velocity(speed, speed);
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	6f ef       	ldi	r22, 0xFF	; 255
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		soft_right_degrees(turning_angle);
     73c:	8d e4       	ldi	r24, 0x4D	; 77
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 85 06 	call	0xd0a	; 0xd0a <soft_right_degrees>
		break;
     744:	08 95       	ret

		case 1:
		case 18:
		velocity(speed, speed);
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	6f ef       	ldi	r22, 0xFF	; 255
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		forward();
     752:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
		flag2 = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	90 93 1f 02 	sts	0x021F, r25
     75e:	80 93 1e 02 	sts	0x021E, r24
		while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     762:	80 91 20 02 	lds	r24, 0x0220
     766:	85 31       	cpi	r24, 0x15	; 21
     768:	08 f4       	brcc	.+2      	; 0x76c <choice+0x6e>
     76a:	2a c2       	rjmp	.+1108   	; 0xbc0 <choice+0x4c2>
     76c:	80 91 21 02 	lds	r24, 0x0221
     770:	85 31       	cpi	r24, 0x15	; 21
     772:	08 f4       	brcc	.+2      	; 0x776 <choice+0x78>
     774:	25 c2       	rjmp	.+1098   	; 0xbc0 <choice+0x4c2>
     776:	80 91 22 02 	lds	r24, 0x0222
     77a:	85 31       	cpi	r24, 0x15	; 21
     77c:	08 f4       	brcc	.+2      	; 0x780 <choice+0x82>
     77e:	20 c2       	rjmp	.+1088   	; 0xbc0 <choice+0x4c2>
			Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     786:	80 93 22 02 	sts	0x0222, r24
			Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     790:	80 93 21 02 	sts	0x0221, r24
			Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     79a:	80 93 20 02 	sts	0x0220, r24
		case 1:
		case 18:
		velocity(speed, speed);
		forward();
		flag2 = 1;
		while(Right_black_line > 20 && Center_black_line > 20 && Left_black_line > 20 ){
     79e:	85 31       	cpi	r24, 0x15	; 21
     7a0:	08 f4       	brcc	.+2      	; 0x7a4 <choice+0xa6>
     7a2:	0e c2       	rjmp	.+1052   	; 0xbc0 <choice+0x4c2>
     7a4:	80 91 21 02 	lds	r24, 0x0221
     7a8:	85 31       	cpi	r24, 0x15	; 21
     7aa:	08 f4       	brcc	.+2      	; 0x7ae <choice+0xb0>
     7ac:	09 c2       	rjmp	.+1042   	; 0xbc0 <choice+0x4c2>
     7ae:	80 91 22 02 	lds	r24, 0x0222
     7b2:	85 31       	cpi	r24, 0x15	; 21
     7b4:	28 f7       	brcc	.-54     	; 0x780 <choice+0x82>
     7b6:	08 95       	ret
     7b8:	82 e3       	ldi	r24, 0x32	; 50
     7ba:	93 ef       	ldi	r25, 0xF3	; 243
     7bc:	a4 e0       	ldi	r26, 0x04	; 4
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	a0 40       	sbci	r26, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <choice+0xc0>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <choice+0xca>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <choice+0xcc>
		
		break;

		case 8:
		_delay_ms(node_del);
		stop();
     7ca:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	a1 e1       	ldi	r26, 0x11	; 17
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	90 40       	sbci	r25, 0x00	; 0
     7d8:	a0 40       	sbci	r26, 0x00	; 0
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <choice+0xd6>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <choice+0xe0>
     7de:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_left()==1){
     7e0:	0e 94 48 02 	call	0x490	; 0x490 <check_garbage_left>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	91 05       	cpc	r25, r1
     7e8:	a1 f4       	brne	.+40     	; 0x812 <choice+0x114>
			oc++;
     7ea:	80 91 14 02 	lds	r24, 0x0214
     7ee:	90 91 15 02 	lds	r25, 0x0215
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	90 93 15 02 	sts	0x0215, r25
     7f8:	80 93 14 02 	sts	0x0214, r24
			node();
     7fc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	9f ef       	ldi	r25, 0xFF	; 255
     804:	ac e2       	ldi	r26, 0x2C	; 44
     806:	81 50       	subi	r24, 0x01	; 1
     808:	90 40       	sbci	r25, 0x00	; 0
     80a:	a0 40       	sbci	r26, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <choice+0x108>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <choice+0x112>
     810:	00 00       	nop
			_delay_ms(1000);
		}
		if(check_garbage_right()==1){
     812:	0e 94 56 02 	call	0x4ac	; 0x4ac <check_garbage_right>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	91 05       	cpc	r25, r1
     81a:	59 f4       	brne	.+22     	; 0x832 <choice+0x134>
			oc++;
     81c:	80 91 14 02 	lds	r24, 0x0214
     820:	90 91 15 02 	lds	r25, 0x0215
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	90 93 15 02 	sts	0x0215, r25
     82a:	80 93 14 02 	sts	0x0214, r24
			node();
     82e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		bit_forward();
     832:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		break;
     836:	08 95       	ret
     838:	82 e3       	ldi	r24, 0x32	; 50
     83a:	93 ef       	ldi	r25, 0xF3	; 243
     83c:	a4 e0       	ldi	r26, 0x04	; 4
     83e:	81 50       	subi	r24, 0x01	; 1
     840:	90 40       	sbci	r25, 0x00	; 0
     842:	a0 40       	sbci	r26, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <choice+0x140>
     846:	00 c0       	rjmp	.+0      	; 0x848 <choice+0x14a>
     848:	00 c0       	rjmp	.+0      	; 0x84a <choice+0x14c>
		case 11:
		_delay_ms(node_del);
		stop();
     84a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	a1 e1       	ldi	r26, 0x11	; 17
     854:	81 50       	subi	r24, 0x01	; 1
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	a0 40       	sbci	r26, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <choice+0x156>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <choice+0x160>
     85e:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_right()==1){
     860:	0e 94 56 02 	call	0x4ac	; 0x4ac <check_garbage_right>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	91 05       	cpc	r25, r1
     868:	59 f4       	brne	.+22     	; 0x880 <choice+0x182>
			oc++;
     86a:	80 91 14 02 	lds	r24, 0x0214
     86e:	90 91 15 02 	lds	r25, 0x0215
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	90 93 15 02 	sts	0x0215, r25
     878:	80 93 14 02 	sts	0x0214, r24
			node();
     87c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		
		bit_forward();
     880:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		
		
		break;
     884:	08 95       	ret
     886:	82 e3       	ldi	r24, 0x32	; 50
     888:	93 ef       	ldi	r25, 0xF3	; 243
     88a:	a4 e0       	ldi	r26, 0x04	; 4
     88c:	81 50       	subi	r24, 0x01	; 1
     88e:	90 40       	sbci	r25, 0x00	; 0
     890:	a0 40       	sbci	r26, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <choice+0x18e>
     894:	00 c0       	rjmp	.+0      	; 0x896 <choice+0x198>
     896:	00 c0       	rjmp	.+0      	; 0x898 <choice+0x19a>
		case 2:
		_delay_ms(node_del);
		stop();
     898:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	a1 e1       	ldi	r26, 0x11	; 17
     8a2:	81 50       	subi	r24, 0x01	; 1
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	a0 40       	sbci	r26, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <choice+0x1a4>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <choice+0x1ae>
     8ac:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_left()==1){
     8ae:	0e 94 48 02 	call	0x490	; 0x490 <check_garbage_left>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	91 05       	cpc	r25, r1
     8b6:	59 f4       	brne	.+22     	; 0x8ce <choice+0x1d0>
			rc++;
     8b8:	80 91 12 02 	lds	r24, 0x0212
     8bc:	90 91 13 02 	lds	r25, 0x0213
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 13 02 	sts	0x0213, r25
     8c6:	80 93 12 02 	sts	0x0212, r24
			node();
     8ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		bit_forward();
     8ce:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		
		break;
     8d2:	08 95       	ret
     8d4:	82 e3       	ldi	r24, 0x32	; 50
     8d6:	93 ef       	ldi	r25, 0xF3	; 243
     8d8:	a4 e0       	ldi	r26, 0x04	; 4
     8da:	81 50       	subi	r24, 0x01	; 1
     8dc:	90 40       	sbci	r25, 0x00	; 0
     8de:	a0 40       	sbci	r26, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <choice+0x1dc>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <choice+0x1e6>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <choice+0x1e8>
		case 3:
		_delay_ms(node_del);
		stop();
     8e6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	9f ef       	ldi	r25, 0xFF	; 255
     8ee:	a1 e1       	ldi	r26, 0x11	; 17
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	a0 40       	sbci	r26, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <choice+0x1f2>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <choice+0x1fc>
     8fa:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_left()==1){
     8fc:	0e 94 48 02 	call	0x490	; 0x490 <check_garbage_left>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	91 05       	cpc	r25, r1
     904:	59 f4       	brne	.+22     	; 0x91c <choice+0x21e>
			rc++;
     906:	80 91 12 02 	lds	r24, 0x0212
     90a:	90 91 13 02 	lds	r25, 0x0213
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	90 93 13 02 	sts	0x0213, r25
     914:	80 93 12 02 	sts	0x0212, r24
			node();
     918:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		
		bit_forward();
     91c:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		
		
		break;
     920:	08 95       	ret
     922:	82 e3       	ldi	r24, 0x32	; 50
     924:	93 ef       	ldi	r25, 0xF3	; 243
     926:	a4 e0       	ldi	r26, 0x04	; 4
     928:	81 50       	subi	r24, 0x01	; 1
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	a0 40       	sbci	r26, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <choice+0x22a>
     930:	00 c0       	rjmp	.+0      	; 0x932 <choice+0x234>
     932:	00 c0       	rjmp	.+0      	; 0x934 <choice+0x236>
		case 7:
		_delay_ms(node_del);
		stop();
     934:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	9f ef       	ldi	r25, 0xFF	; 255
     93c:	a1 e1       	ldi	r26, 0x11	; 17
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	a0 40       	sbci	r26, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <choice+0x240>
     946:	00 c0       	rjmp	.+0      	; 0x948 <choice+0x24a>
     948:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_left()==1){
     94a:	0e 94 48 02 	call	0x490	; 0x490 <check_garbage_left>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	91 05       	cpc	r25, r1
     952:	a1 f4       	brne	.+40     	; 0x97c <choice+0x27e>
			rc++;
     954:	80 91 12 02 	lds	r24, 0x0212
     958:	90 91 13 02 	lds	r25, 0x0213
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	90 93 13 02 	sts	0x0213, r25
     962:	80 93 12 02 	sts	0x0212, r24
			node();
     966:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	9f ef       	ldi	r25, 0xFF	; 255
     96e:	ac e2       	ldi	r26, 0x2C	; 44
     970:	81 50       	subi	r24, 0x01	; 1
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	a0 40       	sbci	r26, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <choice+0x272>
     978:	00 c0       	rjmp	.+0      	; 0x97a <choice+0x27c>
     97a:	00 00       	nop
			_delay_ms(1000);
		}
		if(check_garbage_right()==1){
     97c:	0e 94 56 02 	call	0x4ac	; 0x4ac <check_garbage_right>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	91 05       	cpc	r25, r1
     984:	59 f4       	brne	.+22     	; 0x99c <choice+0x29e>
			rc++;
     986:	80 91 12 02 	lds	r24, 0x0212
     98a:	90 91 13 02 	lds	r25, 0x0213
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	90 93 13 02 	sts	0x0213, r25
     994:	80 93 12 02 	sts	0x0212, r24
			node();
     998:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		bit_forward();
     99c:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>

		break;
     9a0:	08 95       	ret
     9a2:	82 e3       	ldi	r24, 0x32	; 50
     9a4:	93 ef       	ldi	r25, 0xF3	; 243
     9a6:	a4 e0       	ldi	r26, 0x04	; 4
     9a8:	81 50       	subi	r24, 0x01	; 1
     9aa:	90 40       	sbci	r25, 0x00	; 0
     9ac:	a0 40       	sbci	r26, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <choice+0x2aa>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <choice+0x2b4>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <choice+0x2b6>
		case 6:
		_delay_ms(node_del);
		stop();
     9b4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	a1 e1       	ldi	r26, 0x11	; 17
     9be:	81 50       	subi	r24, 0x01	; 1
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	a0 40       	sbci	r26, 0x00	; 0
     9c4:	e1 f7       	brne	.-8      	; 0x9be <choice+0x2c0>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <choice+0x2ca>
     9c8:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_left()==1){
     9ca:	0e 94 48 02 	call	0x490	; 0x490 <check_garbage_left>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	a1 f4       	brne	.+40     	; 0x9fc <choice+0x2fe>
			hc++;
     9d4:	80 91 10 02 	lds	r24, 0x0210
     9d8:	90 91 11 02 	lds	r25, 0x0211
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	90 93 11 02 	sts	0x0211, r25
     9e2:	80 93 10 02 	sts	0x0210, r24
			node();
     9e6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	ac e2       	ldi	r26, 0x2C	; 44
     9f0:	81 50       	subi	r24, 0x01	; 1
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	a0 40       	sbci	r26, 0x00	; 0
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <choice+0x2f2>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <choice+0x2fc>
     9fa:	00 00       	nop
			_delay_ms(1000);
		}
		if(check_garbage_right()==1){
     9fc:	0e 94 56 02 	call	0x4ac	; 0x4ac <check_garbage_right>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	91 05       	cpc	r25, r1
     a04:	59 f4       	brne	.+22     	; 0xa1c <choice+0x31e>
			hc++;
     a06:	80 91 10 02 	lds	r24, 0x0210
     a0a:	90 91 11 02 	lds	r25, 0x0211
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	90 93 11 02 	sts	0x0211, r25
     a14:	80 93 10 02 	sts	0x0210, r24
			node();
     a18:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		bit_forward();
     a1c:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		
		break;
     a20:	08 95       	ret
     a22:	82 e3       	ldi	r24, 0x32	; 50
     a24:	93 ef       	ldi	r25, 0xF3	; 243
     a26:	a4 e0       	ldi	r26, 0x04	; 4
     a28:	81 50       	subi	r24, 0x01	; 1
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a0 40       	sbci	r26, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <choice+0x32a>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <choice+0x334>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <choice+0x336>
		case 12:
		_delay_ms(node_del);
		stop();
     a34:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	a1 e1       	ldi	r26, 0x11	; 17
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	90 40       	sbci	r25, 0x00	; 0
     a42:	a0 40       	sbci	r26, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <choice+0x340>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <choice+0x34a>
     a48:	00 00       	nop
		_delay_ms(400);
		if(check_garbage_right()==1){
     a4a:	0e 94 56 02 	call	0x4ac	; 0x4ac <check_garbage_right>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	91 05       	cpc	r25, r1
     a52:	59 f4       	brne	.+22     	; 0xa6a <choice+0x36c>
			hc++;
     a54:	80 91 10 02 	lds	r24, 0x0210
     a58:	90 91 11 02 	lds	r25, 0x0211
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	90 93 11 02 	sts	0x0211, r25
     a62:	80 93 10 02 	sts	0x0210, r24
			node();
     a66:	0e 94 69 03 	call	0x6d2	; 0x6d2 <node>
		}
		bit_forward();
     a6a:	0e 94 34 03 	call	0x668	; 0x668 <bit_forward>
		
		
		break;
     a6e:	08 95       	ret
		case 15:
		stop();
     a70:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
		while(oc-->0){
     a74:	80 91 14 02 	lds	r24, 0x0214
     a78:	90 91 15 02 	lds	r25, 0x0215
     a7c:	9c 01       	movw	r18, r24
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	30 40       	sbci	r19, 0x00	; 0
     a82:	30 93 15 02 	sts	0x0215, r19
     a86:	20 93 14 02 	sts	0x0214, r18
     a8a:	18 16       	cp	r1, r24
     a8c:	19 06       	cpc	r1, r25
     a8e:	24 f5       	brge	.+72     	; 0xad8 <choice+0x3da>
			buzzer_on();
     a90:	0e 94 a8 00 	call	0x150	; 0x150 <buzzer_on>
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	9f ef       	ldi	r25, 0xFF	; 255
     a98:	ac e2       	ldi	r26, 0x2C	; 44
     a9a:	81 50       	subi	r24, 0x01	; 1
     a9c:	90 40       	sbci	r25, 0x00	; 0
     a9e:	a0 40       	sbci	r26, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <choice+0x39c>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <choice+0x3a6>
     aa4:	00 00       	nop
			_delay_ms(1000);
			buzzer_off();
     aa6:	0e 94 ac 00 	call	0x158	; 0x158 <buzzer_off>
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	ac e2       	ldi	r26, 0x2C	; 44
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	90 40       	sbci	r25, 0x00	; 0
     ab4:	a0 40       	sbci	r26, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <choice+0x3b2>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <choice+0x3bc>
     aba:	00 00       	nop
		
		
		break;
		case 15:
		stop();
		while(oc-->0){
     abc:	80 91 14 02 	lds	r24, 0x0214
     ac0:	90 91 15 02 	lds	r25, 0x0215
     ac4:	9c 01       	movw	r18, r24
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	30 93 15 02 	sts	0x0215, r19
     ace:	20 93 14 02 	sts	0x0214, r18
     ad2:	18 16       	cp	r1, r24
     ad4:	19 06       	cpc	r1, r25
     ad6:	e4 f2       	brlt	.-72     	; 0xa90 <choice+0x392>
			buzzer_on();
			_delay_ms(1000);
			buzzer_off();
			_delay_ms(1000);
		}
		fnode();
     ad8:	0e 94 00 03 	call	0x600	; 0x600 <fnode>
		break;
     adc:	08 95       	ret
		case 16:
		stop();
     ade:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
		while(hc-->0){
     ae2:	80 91 10 02 	lds	r24, 0x0210
     ae6:	90 91 11 02 	lds	r25, 0x0211
     aea:	9c 01       	movw	r18, r24
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	30 40       	sbci	r19, 0x00	; 0
     af0:	30 93 11 02 	sts	0x0211, r19
     af4:	20 93 10 02 	sts	0x0210, r18
     af8:	18 16       	cp	r1, r24
     afa:	19 06       	cpc	r1, r25
     afc:	24 f5       	brge	.+72     	; 0xb46 <choice+0x448>
			buzzer_on();
     afe:	0e 94 a8 00 	call	0x150	; 0x150 <buzzer_on>
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	ac e2       	ldi	r26, 0x2C	; 44
     b08:	81 50       	subi	r24, 0x01	; 1
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	a0 40       	sbci	r26, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <choice+0x40a>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <choice+0x414>
     b12:	00 00       	nop
			_delay_ms(1000);
			buzzer_off();
     b14:	0e 94 ac 00 	call	0x158	; 0x158 <buzzer_off>
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	ac e2       	ldi	r26, 0x2C	; 44
     b1e:	81 50       	subi	r24, 0x01	; 1
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	a0 40       	sbci	r26, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <choice+0x420>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <choice+0x42a>
     b28:	00 00       	nop
		}
		fnode();
		break;
		case 16:
		stop();
		while(hc-->0){
     b2a:	80 91 10 02 	lds	r24, 0x0210
     b2e:	90 91 11 02 	lds	r25, 0x0211
     b32:	9c 01       	movw	r18, r24
     b34:	21 50       	subi	r18, 0x01	; 1
     b36:	30 40       	sbci	r19, 0x00	; 0
     b38:	30 93 11 02 	sts	0x0211, r19
     b3c:	20 93 10 02 	sts	0x0210, r18
     b40:	18 16       	cp	r1, r24
     b42:	19 06       	cpc	r1, r25
     b44:	e4 f2       	brlt	.-72     	; 0xafe <choice+0x400>
			buzzer_on();
			_delay_ms(1000);
			buzzer_off();
			_delay_ms(1000);
		}
		fnode();
     b46:	0e 94 00 03 	call	0x600	; 0x600 <fnode>
		break;
     b4a:	08 95       	ret
		case 17:
		stop();
     b4c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
		while(rc-->0){
     b50:	80 91 12 02 	lds	r24, 0x0212
     b54:	90 91 13 02 	lds	r25, 0x0213
     b58:	9c 01       	movw	r18, r24
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	30 40       	sbci	r19, 0x00	; 0
     b5e:	30 93 13 02 	sts	0x0213, r19
     b62:	20 93 12 02 	sts	0x0212, r18
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	24 f5       	brge	.+72     	; 0xbb4 <choice+0x4b6>
			buzzer_on();
     b6c:	0e 94 a8 00 	call	0x150	; 0x150 <buzzer_on>
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	ac e2       	ldi	r26, 0x2C	; 44
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	90 40       	sbci	r25, 0x00	; 0
     b7a:	a0 40       	sbci	r26, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <choice+0x478>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <choice+0x482>
     b80:	00 00       	nop
			_delay_ms(1000);
			buzzer_off();
     b82:	0e 94 ac 00 	call	0x158	; 0x158 <buzzer_off>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	9f ef       	ldi	r25, 0xFF	; 255
     b8a:	ac e2       	ldi	r26, 0x2C	; 44
     b8c:	81 50       	subi	r24, 0x01	; 1
     b8e:	90 40       	sbci	r25, 0x00	; 0
     b90:	a0 40       	sbci	r26, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <choice+0x48e>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <choice+0x498>
     b96:	00 00       	nop
		}
		fnode();
		break;
		case 17:
		stop();
		while(rc-->0){
     b98:	80 91 12 02 	lds	r24, 0x0212
     b9c:	90 91 13 02 	lds	r25, 0x0213
     ba0:	9c 01       	movw	r18, r24
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	30 40       	sbci	r19, 0x00	; 0
     ba6:	30 93 13 02 	sts	0x0213, r19
     baa:	20 93 12 02 	sts	0x0212, r18
     bae:	18 16       	cp	r1, r24
     bb0:	19 06       	cpc	r1, r25
     bb2:	e4 f2       	brlt	.-72     	; 0xb6c <choice+0x46e>
			buzzer_on();
			_delay_ms(1000);
			buzzer_off();
			_delay_ms(1000);
		}
		fnode();
     bb4:	0e 94 00 03 	call	0x600	; 0x600 <fnode>
		break;
     bb8:	08 95       	ret
		case 19:
		stop();
     bba:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
     bbe:	ff cf       	rjmp	.-2      	; 0xbbe <choice+0x4c0>
     bc0:	08 95       	ret

00000bc2 <buzzer_pin_config>:
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     bc2:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     bc4:	43 98       	cbi	0x08, 3	; 8
}
     bc6:	08 95       	ret

00000bc8 <motion_pin_config>:
 //Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     bc8:	81 b1       	in	r24, 0x01	; 1
     bca:	8f 60       	ori	r24, 0x0F	; 15
     bcc:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     bce:	82 b1       	in	r24, 0x02	; 2
     bd0:	80 7f       	andi	r24, 0xF0	; 240
     bd2:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     bd4:	ea e0       	ldi	r30, 0x0A	; 10
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	80 81       	ld	r24, Z
     bda:	88 61       	ori	r24, 0x18	; 24
     bdc:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     bde:	eb e0       	ldi	r30, 0x0B	; 11
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	80 81       	ld	r24, Z
     be4:	88 61       	ori	r24, 0x18	; 24
     be6:	80 83       	st	Z, r24
}
     be8:	08 95       	ret

00000bea <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     bea:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bec:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     bee:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bf0:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     bf2:	92 b9       	out	0x02, r25	; 2
}
     bf4:	08 95       	ret

00000bf6 <stop>:
	motion_set(0x08);
}

void stop (void)
{
	motion_set(0x00);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     bfc:	08 95       	ret

00000bfe <forward>:
	PORTA = PortARestore; 		// executing the command
}

void forward (void) //both wheels forward
{
	motion_set(0x06);
     bfe:	86 e0       	ldi	r24, 0x06	; 6
     c00:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c04:	08 95       	ret

00000c06 <back>:



void back (void) //both wheels backward
{
	motion_set(0x09);
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c0c:	08 95       	ret

00000c0e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c14:	08 95       	ret

00000c16 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     c16:	8a e0       	ldi	r24, 0x0A	; 10
     c18:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c1c:	08 95       	ret

00000c1e <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
     c1e:	84 e0       	ldi	r24, 0x04	; 4
     c20:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c24:	08 95       	ret

00000c26 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c2c:	08 95       	ret

00000c2e <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c34:	08 95       	ret

00000c36 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	0e 94 f5 05 	call	0xbea	; 0xbea <motion_set>
}
     c3c:	08 95       	ret

00000c3e <left_encoder_pin_config>:
 
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     c3e:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     c40:	74 9a       	sbi	0x0e, 4	; 14
}
     c42:	08 95       	ret

00000c44 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     c44:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     c46:	75 9a       	sbi	0x0e, 5	; 14
}
     c48:	08 95       	ret

00000c4a <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     c4a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     c4c:	ea e6       	ldi	r30, 0x6A	; 106
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     c56:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     c58:	78 94       	sei
}
     c5a:	08 95       	ret

00000c5c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     c5c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     c5e:	ea e6       	ldi	r30, 0x6A	; 106
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 60       	ori	r24, 0x08	; 8
     c66:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     c68:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     c6a:	78 94       	sei
}
     c6c:	08 95       	ret

00000c6e <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     c74:	bc 01       	movw	r22, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__floatunsisf>
     c7e:	28 e4       	ldi	r18, 0x48	; 72
     c80:	31 ee       	ldi	r19, 0xE1	; 225
     c82:	42 e8       	ldi	r20, 0x82	; 130
     c84:	50 e4       	ldi	r21, 0x40	; 64
     c86:	0e 94 86 08 	call	0x110c	; 0x110c <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c8a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     c96:	10 92 16 02 	sts	0x0216, r1
     c9a:	10 92 17 02 	sts	0x0217, r1
     c9e:	10 92 18 02 	sts	0x0218, r1
     ca2:	10 92 19 02 	sts	0x0219, r1
	ShaftCountLeft = 0;
     ca6:	10 92 1a 02 	sts	0x021A, r1
     caa:	10 92 1b 02 	sts	0x021B, r1
     cae:	10 92 1c 02 	sts	0x021C, r1
     cb2:	10 92 1d 02 	sts	0x021D, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	c0 e0       	ldi	r28, 0x00	; 0
     cba:	40 91 16 02 	lds	r20, 0x0216
     cbe:	50 91 17 02 	lds	r21, 0x0217
     cc2:	60 91 18 02 	lds	r22, 0x0218
     cc6:	70 91 19 02 	lds	r23, 0x0219
     cca:	00 91 1a 02 	lds	r16, 0x021A
     cce:	10 91 1b 02 	lds	r17, 0x021B
     cd2:	20 91 1c 02 	lds	r18, 0x021C
     cd6:	30 91 1d 02 	lds	r19, 0x021D
     cda:	ef 2f       	mov	r30, r31
     cdc:	48 17       	cp	r20, r24
     cde:	59 07       	cpc	r21, r25
     ce0:	6a 07       	cpc	r22, r26
     ce2:	7b 07       	cpc	r23, r27
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <angle_rotate+0x7a>
     ce6:	ec 2f       	mov	r30, r28
     ce8:	ee 23       	and	r30, r30
     cea:	49 f4       	brne	.+18     	; 0xcfe <angle_rotate+0x90>
     cec:	4f 2f       	mov	r20, r31
     cee:	08 17       	cp	r16, r24
     cf0:	19 07       	cpc	r17, r25
     cf2:	2a 07       	cpc	r18, r26
     cf4:	3b 07       	cpc	r19, r27
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <angle_rotate+0x8c>
     cf8:	4c 2f       	mov	r20, r28
     cfa:	44 23       	and	r20, r20
     cfc:	f1 f2       	breq	.-68     	; 0xcba <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     cfe:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
}
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <soft_right_degrees>:
	Degrees=Degrees*2;
	angle_rotate(Degrees);
}

void soft_right_degrees(unsigned int Degrees)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     d10:	0e 94 13 06 	call	0xc26	; 0xc26 <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     d14:	ce 01       	movw	r24, r28
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <soft_left_degrees>:
	angle_rotate(Degrees);
}


void soft_left_degrees(unsigned int Degrees)
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     d2a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     d2e:	ce 01       	movw	r24, r28
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     d3e:	bc 01       	movw	r22, r24
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 1a 09 	call	0x1234	; 0x1234 <__floatunsisf>
     d48:	25 ee       	ldi	r18, 0xE5	; 229
     d4a:	30 ed       	ldi	r19, 0xD0	; 208
     d4c:	4a ea       	ldi	r20, 0xAA	; 170
     d4e:	50 e4       	ldi	r21, 0x40	; 64
     d50:	0e 94 86 08 	call	0x110c	; 0x110c <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     d54:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fixunssfsi>
     d58:	46 2f       	mov	r20, r22
     d5a:	57 2f       	mov	r21, r23
     d5c:	68 2f       	mov	r22, r24
     d5e:	79 2f       	mov	r23, r25
	ShaftCountRight = 0;
     d60:	10 92 16 02 	sts	0x0216, r1
     d64:	10 92 17 02 	sts	0x0217, r1
     d68:	10 92 18 02 	sts	0x0218, r1
     d6c:	10 92 19 02 	sts	0x0219, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     d70:	80 91 16 02 	lds	r24, 0x0216
     d74:	90 91 17 02 	lds	r25, 0x0217
     d78:	a0 91 18 02 	lds	r26, 0x0218
     d7c:	b0 91 19 02 	lds	r27, 0x0219
     d80:	48 17       	cp	r20, r24
     d82:	59 07       	cpc	r21, r25
     d84:	6a 07       	cpc	r22, r26
     d86:	7b 07       	cpc	r23, r27
     d88:	98 f7       	brcc	.-26     	; 0xd70 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     d8a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <stop>
}
     d8e:	08 95       	ret

00000d90 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
	forward();
     d96:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
	linear_distance_mm(DistanceInMM);
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <linear_distance_mm>
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	ec 01       	movw	r28, r24
	back();
     dac:	0e 94 03 06 	call	0xc06	; 0xc06 <back>
	linear_distance_mm(DistanceInMM);
     db0:	ce 01       	movw	r24, r28
     db2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <linear_distance_mm>
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     dc2:	0e 94 07 06 	call	0xc0e	; 0xc0e <left>
	angle_rotate(Degrees);
     dc6:	ce 01       	movw	r24, r28
     dc8:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <right_degrees>:



void right_degrees(unsigned int Degrees)
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     dd8:	0e 94 0b 06 	call	0xc16	; 0xc16 <right>
	angle_rotate(Degrees);
     ddc:	ce 01       	movw	r24, r28
     dde:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <soft_left_2_degrees>:
	Degrees=Degrees*2;
	angle_rotate(Degrees);
}

void soft_left_2_degrees(unsigned int Degrees)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
     dee:	0e 94 17 06 	call	0xc2e	; 0xc2e <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     df2:	ce 01       	movw	r24, r28
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
     e08:	0e 94 1b 06 	call	0xc36	; 0xc36 <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     e0c:	ce 01       	movw	r24, r28
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0e 94 37 06 	call	0xc6e	; 0xc6e <angle_rotate>
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <timer5_init>:
 
void timer5_init(){
	
	TCCR5A = 0xA9;	//Stop
     e1c:	89 ea       	ldi	r24, 0xA9	; 169
     e1e:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0x0B;	//Stop
     e22:	8b e0       	ldi	r24, 0x0B	; 11
     e24:	80 93 21 01 	sts	0x0121, r24
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x00;	//Counter lower 8-bit value to which OCR5xH value is compared with
     e2e:	10 92 24 01 	sts	0x0124, r1
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     e32:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     e36:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     e3a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     e3e:	80 93 2a 01 	sts	0x012A, r24
}
     e42:	08 95       	ret

00000e44 <port_init>:


//Function to initialize ports
void port_init()
{
	adc_pin_config();
     e44:	0e 94 19 02 	call	0x432	; 0x432 <adc_pin_config>
	motion_pin_config(); //robot motion pins config
     e48:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
     e4c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     e50:	0e 94 22 06 	call	0xc44	; 0xc44 <right_encoder_pin_config>
	buzzer_pin_config();
     e54:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <buzzer_pin_config>
}
     e58:	08 95       	ret

00000e5a <__vector_6>:
			
//ISR for right position encoder
ISR(INT5_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     e6c:	80 91 16 02 	lds	r24, 0x0216
     e70:	90 91 17 02 	lds	r25, 0x0217
     e74:	a0 91 18 02 	lds	r26, 0x0218
     e78:	b0 91 19 02 	lds	r27, 0x0219
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	a1 1d       	adc	r26, r1
     e80:	b1 1d       	adc	r27, r1
     e82:	80 93 16 02 	sts	0x0216, r24
     e86:	90 93 17 02 	sts	0x0217, r25
     e8a:	a0 93 18 02 	sts	0x0218, r26
     e8e:	b0 93 19 02 	sts	0x0219, r27
}
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     eb6:	80 91 1a 02 	lds	r24, 0x021A
     eba:	90 91 1b 02 	lds	r25, 0x021B
     ebe:	a0 91 1c 02 	lds	r26, 0x021C
     ec2:	b0 91 1d 02 	lds	r27, 0x021D
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	a1 1d       	adc	r26, r1
     eca:	b1 1d       	adc	r27, r1
     ecc:	80 93 1a 02 	sts	0x021A, r24
     ed0:	90 93 1b 02 	sts	0x021B, r25
     ed4:	a0 93 1c 02 	sts	0x021C, r26
     ed8:	b0 93 1d 02 	sts	0x021D, r27
}
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	d8 2f       	mov	r29, r24
     ef4:	c6 2f       	mov	r28, r22
     ef6:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     ef8:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     efc:	48 2f       	mov	r20, r24
     efe:	80 93 29 02 	sts	0x0229, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     f02:	8d 2f       	mov	r24, r29
     f04:	6c 2f       	mov	r22, r28
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	23 e0       	ldi	r18, 0x03	; 3
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
	cli(); //Clears the global interrupt
     f16:	f8 94       	cli
	port_init();  //Initializes all the ports
     f18:	0e 94 22 07 	call	0xe44	; 0xe44 <port_init>
	left_position_encoder_interrupt_init();
     f1c:	0e 94 25 06 	call	0xc4a	; 0xc4a <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     f20:	0e 94 2e 06 	call	0xc5c	; 0xc5c <right_position_encoder_interrupt_init>
	timer5_init();
     f24:	0e 94 0e 07 	call	0xe1c	; 0xe1c <timer5_init>
	adc_init();
     f28:	0e 94 20 02 	call	0x440	; 0x440 <adc_init>
	sei();   // Enables the global interrupt
     f2c:	78 94       	sei
}
     f2e:	08 95       	ret

00000f30 <main>:

int main()
{
	init_devices();
     f30:	0e 94 8b 07 	call	0xf16	; 0xf16 <init_devices>
	lcd_set_4bit();
     f34:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_set_4bit>
	lcd_init();
     f38:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_init>
	Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     f42:	80 93 22 02 	sts	0x0222, r24
	Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     f4c:	80 93 21 02 	sts	0x0221, r24
	Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     f56:	80 93 20 02 	sts	0x0220, r24
	lcd_print(2,1,Left_black_line,3);
     f5a:	40 91 22 02 	lds	r20, 0x0222
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	23 e0       	ldi	r18, 0x03	; 3
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
	lcd_print(2,4,Center_black_line,3);
     f6c:	40 91 21 02 	lds	r20, 0x0221
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	64 e0       	ldi	r22, 0x04	; 4
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	23 e0       	ldi	r18, 0x03	; 3
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
	lcd_print(2,9,Right_black_line,3);
     f7e:	40 91 20 02 	lds	r20, 0x0220
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	69 e0       	ldi	r22, 0x09	; 9
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	23 e0       	ldi	r18, 0x03	; 3
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
	func_init();
     f90:	0e 94 74 02 	call	0x4e8	; 0x4e8 <func_init>
	int ncntr=0;
     f94:	c0 e0       	ldi	r28, 0x00	; 0
     f96:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{

		Left_black_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     f9e:	80 93 22 02 	sts	0x0222, r24
		Center_black_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     fa8:	80 93 21 02 	sts	0x0221, r24
		Right_black_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_Conversion>
     fb2:	80 93 20 02 	sts	0x0220, r24

		lcd_print(1,1,oc,3);
     fb6:	40 91 14 02 	lds	r20, 0x0214
     fba:	50 91 15 02 	lds	r21, 0x0215
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	23 e0       	ldi	r18, 0x03	; 3
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
		lcd_print(1,4,hc,3);
     fca:	40 91 10 02 	lds	r20, 0x0210
     fce:	50 91 11 02 	lds	r21, 0x0211
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	64 e0       	ldi	r22, 0x04	; 4
     fd6:	23 e0       	ldi	r18, 0x03	; 3
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
		lcd_print(1,9,rc,3);
     fde:	40 91 12 02 	lds	r20, 0x0212
     fe2:	50 91 13 02 	lds	r21, 0x0213
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	69 e0       	ldi	r22, 0x09	; 9
     fea:	23 e0       	ldi	r18, 0x03	; 3
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_print>
		
		int flag1 = 0;
		if((Center_black_line > 0x20) && ((Left_black_line<0x42)&&(Right_black_line<0x42)))
     ff2:	60 91 21 02 	lds	r22, 0x0221
     ff6:	61 32       	cpi	r22, 0x21	; 33
     ff8:	d8 f0       	brcs	.+54     	; 0x1030 <main+0x100>
     ffa:	80 91 22 02 	lds	r24, 0x0222
     ffe:	82 34       	cpi	r24, 0x42	; 66
    1000:	b8 f4       	brcc	.+46     	; 0x1030 <main+0x100>
    1002:	80 91 20 02 	lds	r24, 0x0220
    1006:	82 34       	cpi	r24, 0x42	; 66
    1008:	98 f4       	brcc	.+38     	; 0x1030 <main+0x100>
		{
			forward();
    100a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
			velocity(speed, speed);
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
			flag1 = 1;
			if (flag2 == 1)
    1016:	80 91 1e 02 	lds	r24, 0x021E
    101a:	90 91 1f 02 	lds	r25, 0x021F
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	09 f0       	breq	.+2      	; 0x1026 <main+0xf6>
    1024:	4c c0       	rjmp	.+152    	; 0x10be <main+0x18e>
			{
				//_delay_ms(500);
				flag2 = 0;
    1026:	10 92 1f 02 	sts	0x021F, r1
    102a:	10 92 1e 02 	sts	0x021E, r1
    102e:	47 c0       	rjmp	.+142    	; 0x10be <main+0x18e>
			_delay_ms(300);
			//forward();
			//velocity(speed,speed);
		}*/
		
		else if(Right_black_line > threshold && Center_black_line > threshold && Left_black_line < threshold){
    1030:	40 91 20 02 	lds	r20, 0x0220
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	4f 31       	cpi	r20, 0x1F	; 31
    1038:	51 05       	cpc	r21, r1
    103a:	94 f0       	brlt	.+36     	; 0x1060 <main+0x130>
    103c:	86 2f       	mov	r24, r22
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	8f 31       	cpi	r24, 0x1F	; 31
    1042:	91 05       	cpc	r25, r1
    1044:	6c f0       	brlt	.+26     	; 0x1060 <main+0x130>
    1046:	80 91 22 02 	lds	r24, 0x0222
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	8e 31       	cpi	r24, 0x1E	; 30
    104e:	91 05       	cpc	r25, r1
    1050:	3c f4       	brge	.+14     	; 0x1060 <main+0x130>
			velocity(195,195);
    1052:	83 ec       	ldi	r24, 0xC3	; 195
    1054:	63 ec       	ldi	r22, 0xC3	; 195
    1056:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
			soft_right_2();
    105a:	0e 94 1b 06 	call	0xc36	; 0xc36 <soft_right_2>
    105e:	2f c0       	rjmp	.+94     	; 0x10be <main+0x18e>
			
		}
		
		else if(Left_black_line > threshold && Center_black_line > threshold && Right_black_line < threshold){
    1060:	80 91 22 02 	lds	r24, 0x0222
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	8f 31       	cpi	r24, 0x1F	; 31
    1068:	91 05       	cpc	r25, r1
    106a:	7c f0       	brlt	.+30     	; 0x108a <main+0x15a>
    106c:	26 2f       	mov	r18, r22
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	2f 31       	cpi	r18, 0x1F	; 31
    1072:	31 05       	cpc	r19, r1
    1074:	54 f0       	brlt	.+20     	; 0x108a <main+0x15a>
    1076:	4e 31       	cpi	r20, 0x1E	; 30
    1078:	51 05       	cpc	r21, r1
    107a:	54 f4       	brge	.+20     	; 0x1090 <main+0x160>
			velocity(195,195);
    107c:	83 ec       	ldi	r24, 0xC3	; 195
    107e:	63 ec       	ldi	r22, 0xC3	; 195
    1080:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
			soft_left_2();
    1084:	0e 94 17 06 	call	0xc2e	; 0xc2e <soft_left_2>
    1088:	1a c0       	rjmp	.+52     	; 0x10be <main+0x18e>
		}
		
		
		else if (Right_black_line >= threshold && Left_black_line < threshold && Center_black_line < 60 )
    108a:	4e 31       	cpi	r20, 0x1E	; 30
    108c:	51 05       	cpc	r21, r1
    108e:	64 f0       	brlt	.+24     	; 0x10a8 <main+0x178>
    1090:	8e 31       	cpi	r24, 0x1E	; 30
    1092:	91 05       	cpc	r25, r1
    1094:	a4 f4       	brge	.+40     	; 0x10be <main+0x18e>
    1096:	6c 33       	cpi	r22, 0x3C	; 60
    1098:	90 f4       	brcc	.+36     	; 0x10be <main+0x18e>
		{
			forward();
    109a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
			velocity(cor_speed, c_speed);
    109e:	82 ed       	ldi	r24, 0xD2	; 210
    10a0:	69 e4       	ldi	r22, 0x49	; 73
    10a2:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <main+0x18e>
		} else if (Right_black_line < threshold && Left_black_line >= threshold && Center_black_line < 60)
    10a8:	8e 31       	cpi	r24, 0x1E	; 30
    10aa:	91 05       	cpc	r25, r1
    10ac:	44 f0       	brlt	.+16     	; 0x10be <main+0x18e>
    10ae:	6c 33       	cpi	r22, 0x3C	; 60
    10b0:	30 f4       	brcc	.+12     	; 0x10be <main+0x18e>
		{
			forward();
    10b2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
			velocity(c_speed, cor_speed);
    10b6:	89 e4       	ldi	r24, 0x49	; 73
    10b8:	62 ed       	ldi	r22, 0xD2	; 210
    10ba:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
		}
		
		if (Right_black_line > threshold && Center_black_line > threshold && Left_black_line > threshold && flag2 == 0)
    10be:	80 91 20 02 	lds	r24, 0x0220
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	8f 31       	cpi	r24, 0x1F	; 31
    10c6:	91 05       	cpc	r25, r1
    10c8:	0c f4       	brge	.+2      	; 0x10cc <main+0x19c>
    10ca:	66 cf       	rjmp	.-308    	; 0xf98 <main+0x68>
    10cc:	80 91 21 02 	lds	r24, 0x0221
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	8f 31       	cpi	r24, 0x1F	; 31
    10d4:	91 05       	cpc	r25, r1
    10d6:	0c f4       	brge	.+2      	; 0x10da <main+0x1aa>
    10d8:	5f cf       	rjmp	.-322    	; 0xf98 <main+0x68>
    10da:	80 91 22 02 	lds	r24, 0x0222
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	8f 31       	cpi	r24, 0x1F	; 31
    10e2:	91 05       	cpc	r25, r1
    10e4:	0c f4       	brge	.+2      	; 0x10e8 <main+0x1b8>
    10e6:	58 cf       	rjmp	.-336    	; 0xf98 <main+0x68>
    10e8:	80 91 1e 02 	lds	r24, 0x021E
    10ec:	90 91 1f 02 	lds	r25, 0x021F
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0x1c6>
    10f4:	51 cf       	rjmp	.-350    	; 0xf98 <main+0x68>
		{	velocity(speed,speed);
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	6f ef       	ldi	r22, 0xFF	; 255
    10fa:	0e 94 b0 00 	call	0x160	; 0x160 <velocity>
			forward();
    10fe:	0e 94 ff 05 	call	0xbfe	; 0xbfe <forward>
			ncntr++;
    1102:	21 96       	adiw	r28, 0x01	; 1
			//stop();
			//buzzer_on();
			//_delay_ms(1000);
			//buzzer_off();
			// forward_mm(); // move robot by some distance
			choice(ncntr);
    1104:	ce 01       	movw	r24, r28
    1106:	0e 94 7f 03 	call	0x6fe	; 0x6fe <choice>
    110a:	46 cf       	rjmp	.-372    	; 0xf98 <main+0x68>

0000110c <__divsf3>:
    110c:	0c d0       	rcall	.+24     	; 0x1126 <__divsf3x>
    110e:	e6 c0       	rjmp	.+460    	; 0x12dc <__fp_round>
    1110:	de d0       	rcall	.+444    	; 0x12ce <__fp_pscB>
    1112:	40 f0       	brcs	.+16     	; 0x1124 <__divsf3+0x18>
    1114:	d5 d0       	rcall	.+426    	; 0x12c0 <__fp_pscA>
    1116:	30 f0       	brcs	.+12     	; 0x1124 <__divsf3+0x18>
    1118:	21 f4       	brne	.+8      	; 0x1122 <__divsf3+0x16>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	19 f0       	breq	.+6      	; 0x1124 <__divsf3+0x18>
    111e:	c7 c0       	rjmp	.+398    	; 0x12ae <__fp_inf>
    1120:	51 11       	cpse	r21, r1
    1122:	10 c1       	rjmp	.+544    	; 0x1344 <__fp_szero>
    1124:	ca c0       	rjmp	.+404    	; 0x12ba <__fp_nan>

00001126 <__divsf3x>:
    1126:	eb d0       	rcall	.+470    	; 0x12fe <__fp_split3>
    1128:	98 f3       	brcs	.-26     	; 0x1110 <__divsf3+0x4>

0000112a <__divsf3_pse>:
    112a:	99 23       	and	r25, r25
    112c:	c9 f3       	breq	.-14     	; 0x1120 <__divsf3+0x14>
    112e:	55 23       	and	r21, r21
    1130:	b1 f3       	breq	.-20     	; 0x111e <__divsf3+0x12>
    1132:	95 1b       	sub	r25, r21
    1134:	55 0b       	sbc	r21, r21
    1136:	bb 27       	eor	r27, r27
    1138:	aa 27       	eor	r26, r26
    113a:	62 17       	cp	r22, r18
    113c:	73 07       	cpc	r23, r19
    113e:	84 07       	cpc	r24, r20
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__divsf3_pse+0x26>
    1142:	9f 5f       	subi	r25, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	44 1f       	adc	r20, r20
    114c:	aa 1f       	adc	r26, r26
    114e:	a9 f3       	breq	.-22     	; 0x113a <__divsf3_pse+0x10>
    1150:	33 d0       	rcall	.+102    	; 0x11b8 <__divsf3_pse+0x8e>
    1152:	0e 2e       	mov	r0, r30
    1154:	3a f0       	brmi	.+14     	; 0x1164 <__divsf3_pse+0x3a>
    1156:	e0 e8       	ldi	r30, 0x80	; 128
    1158:	30 d0       	rcall	.+96     	; 0x11ba <__divsf3_pse+0x90>
    115a:	91 50       	subi	r25, 0x01	; 1
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	e6 95       	lsr	r30
    1160:	00 1c       	adc	r0, r0
    1162:	ca f7       	brpl	.-14     	; 0x1156 <__divsf3_pse+0x2c>
    1164:	29 d0       	rcall	.+82     	; 0x11b8 <__divsf3_pse+0x8e>
    1166:	fe 2f       	mov	r31, r30
    1168:	27 d0       	rcall	.+78     	; 0x11b8 <__divsf3_pse+0x8e>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	bb 1f       	adc	r27, r27
    1172:	26 17       	cp	r18, r22
    1174:	37 07       	cpc	r19, r23
    1176:	48 07       	cpc	r20, r24
    1178:	ab 07       	cpc	r26, r27
    117a:	b0 e8       	ldi	r27, 0x80	; 128
    117c:	09 f0       	breq	.+2      	; 0x1180 <__divsf3_pse+0x56>
    117e:	bb 0b       	sbc	r27, r27
    1180:	80 2d       	mov	r24, r0
    1182:	bf 01       	movw	r22, r30
    1184:	ff 27       	eor	r31, r31
    1186:	93 58       	subi	r25, 0x83	; 131
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	2a f0       	brmi	.+10     	; 0x1196 <__divsf3_pse+0x6c>
    118c:	9e 3f       	cpi	r25, 0xFE	; 254
    118e:	51 05       	cpc	r21, r1
    1190:	68 f0       	brcs	.+26     	; 0x11ac <__divsf3_pse+0x82>
    1192:	8d c0       	rjmp	.+282    	; 0x12ae <__fp_inf>
    1194:	d7 c0       	rjmp	.+430    	; 0x1344 <__fp_szero>
    1196:	5f 3f       	cpi	r21, 0xFF	; 255
    1198:	ec f3       	brlt	.-6      	; 0x1194 <__divsf3_pse+0x6a>
    119a:	98 3e       	cpi	r25, 0xE8	; 232
    119c:	dc f3       	brlt	.-10     	; 0x1194 <__divsf3_pse+0x6a>
    119e:	86 95       	lsr	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b7 95       	ror	r27
    11a6:	f7 95       	ror	r31
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	c9 f7       	brne	.-14     	; 0x119e <__divsf3_pse+0x74>
    11ac:	88 0f       	add	r24, r24
    11ae:	91 1d       	adc	r25, r1
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	97 f9       	bld	r25, 7
    11b6:	08 95       	ret
    11b8:	e1 e0       	ldi	r30, 0x01	; 1
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	bb 1f       	adc	r27, r27
    11c2:	62 17       	cp	r22, r18
    11c4:	73 07       	cpc	r23, r19
    11c6:	84 07       	cpc	r24, r20
    11c8:	ba 07       	cpc	r27, r26
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <__divsf3_pse+0xaa>
    11cc:	62 1b       	sub	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	84 0b       	sbc	r24, r20
    11d2:	ba 0b       	sbc	r27, r26
    11d4:	ee 1f       	adc	r30, r30
    11d6:	88 f7       	brcc	.-30     	; 0x11ba <__divsf3_pse+0x90>
    11d8:	e0 95       	com	r30
    11da:	08 95       	ret

000011dc <__fixunssfsi>:
    11dc:	98 d0       	rcall	.+304    	; 0x130e <__fp_splitA>
    11de:	88 f0       	brcs	.+34     	; 0x1202 <__fixunssfsi+0x26>
    11e0:	9f 57       	subi	r25, 0x7F	; 127
    11e2:	90 f0       	brcs	.+36     	; 0x1208 <__fixunssfsi+0x2c>
    11e4:	b9 2f       	mov	r27, r25
    11e6:	99 27       	eor	r25, r25
    11e8:	b7 51       	subi	r27, 0x17	; 23
    11ea:	a0 f0       	brcs	.+40     	; 0x1214 <__fixunssfsi+0x38>
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <__fixunssfsi+0x46>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	1a f0       	brmi	.+6      	; 0x11fe <__fixunssfsi+0x22>
    11f8:	ba 95       	dec	r27
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__fixunssfsi+0x12>
    11fc:	12 c0       	rjmp	.+36     	; 0x1222 <__fixunssfsi+0x46>
    11fe:	b1 30       	cpi	r27, 0x01	; 1
    1200:	81 f0       	breq	.+32     	; 0x1222 <__fixunssfsi+0x46>
    1202:	9f d0       	rcall	.+318    	; 0x1342 <__fp_zero>
    1204:	b1 e0       	ldi	r27, 0x01	; 1
    1206:	08 95       	ret
    1208:	9c c0       	rjmp	.+312    	; 0x1342 <__fp_zero>
    120a:	67 2f       	mov	r22, r23
    120c:	78 2f       	mov	r23, r24
    120e:	88 27       	eor	r24, r24
    1210:	b8 5f       	subi	r27, 0xF8	; 248
    1212:	39 f0       	breq	.+14     	; 0x1222 <__fixunssfsi+0x46>
    1214:	b9 3f       	cpi	r27, 0xF9	; 249
    1216:	cc f3       	brlt	.-14     	; 0x120a <__fixunssfsi+0x2e>
    1218:	86 95       	lsr	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b3 95       	inc	r27
    1220:	d9 f7       	brne	.-10     	; 0x1218 <__fixunssfsi+0x3c>
    1222:	3e f4       	brtc	.+14     	; 0x1232 <__fixunssfsi+0x56>
    1224:	90 95       	com	r25
    1226:	80 95       	com	r24
    1228:	70 95       	com	r23
    122a:	61 95       	neg	r22
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__floatunsisf>:
    1234:	e8 94       	clt
    1236:	09 c0       	rjmp	.+18     	; 0x124a <__floatsisf+0x12>

00001238 <__floatsisf>:
    1238:	97 fb       	bst	r25, 7
    123a:	3e f4       	brtc	.+14     	; 0x124a <__floatsisf+0x12>
    123c:	90 95       	com	r25
    123e:	80 95       	com	r24
    1240:	70 95       	com	r23
    1242:	61 95       	neg	r22
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	99 23       	and	r25, r25
    124c:	a9 f0       	breq	.+42     	; 0x1278 <__floatsisf+0x40>
    124e:	f9 2f       	mov	r31, r25
    1250:	96 e9       	ldi	r25, 0x96	; 150
    1252:	bb 27       	eor	r27, r27
    1254:	93 95       	inc	r25
    1256:	f6 95       	lsr	r31
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f1 11       	cpse	r31, r1
    1262:	f8 cf       	rjmp	.-16     	; 0x1254 <__floatsisf+0x1c>
    1264:	fa f4       	brpl	.+62     	; 0x12a4 <__floatsisf+0x6c>
    1266:	bb 0f       	add	r27, r27
    1268:	11 f4       	brne	.+4      	; 0x126e <__floatsisf+0x36>
    126a:	60 ff       	sbrs	r22, 0
    126c:	1b c0       	rjmp	.+54     	; 0x12a4 <__floatsisf+0x6c>
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	16 c0       	rjmp	.+44     	; 0x12a4 <__floatsisf+0x6c>
    1278:	88 23       	and	r24, r24
    127a:	11 f0       	breq	.+4      	; 0x1280 <__floatsisf+0x48>
    127c:	96 e9       	ldi	r25, 0x96	; 150
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <__floatsisf+0x6a>
    1280:	77 23       	and	r23, r23
    1282:	21 f0       	breq	.+8      	; 0x128c <__floatsisf+0x54>
    1284:	9e e8       	ldi	r25, 0x8E	; 142
    1286:	87 2f       	mov	r24, r23
    1288:	76 2f       	mov	r23, r22
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <__floatsisf+0x5e>
    128c:	66 23       	and	r22, r22
    128e:	71 f0       	breq	.+28     	; 0x12ac <__floatsisf+0x74>
    1290:	96 e8       	ldi	r25, 0x86	; 134
    1292:	86 2f       	mov	r24, r22
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	2a f0       	brmi	.+10     	; 0x12a4 <__floatsisf+0x6c>
    129a:	9a 95       	dec	r25
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	da f7       	brpl	.-10     	; 0x129a <__floatsisf+0x62>
    12a4:	88 0f       	add	r24, r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret

000012ae <__fp_inf>:
    12ae:	97 f9       	bld	r25, 7
    12b0:	9f 67       	ori	r25, 0x7F	; 127
    12b2:	80 e8       	ldi	r24, 0x80	; 128
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	08 95       	ret

000012ba <__fp_nan>:
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	80 ec       	ldi	r24, 0xC0	; 192
    12be:	08 95       	ret

000012c0 <__fp_pscA>:
    12c0:	00 24       	eor	r0, r0
    12c2:	0a 94       	dec	r0
    12c4:	16 16       	cp	r1, r22
    12c6:	17 06       	cpc	r1, r23
    12c8:	18 06       	cpc	r1, r24
    12ca:	09 06       	cpc	r0, r25
    12cc:	08 95       	ret

000012ce <__fp_pscB>:
    12ce:	00 24       	eor	r0, r0
    12d0:	0a 94       	dec	r0
    12d2:	12 16       	cp	r1, r18
    12d4:	13 06       	cpc	r1, r19
    12d6:	14 06       	cpc	r1, r20
    12d8:	05 06       	cpc	r0, r21
    12da:	08 95       	ret

000012dc <__fp_round>:
    12dc:	09 2e       	mov	r0, r25
    12de:	03 94       	inc	r0
    12e0:	00 0c       	add	r0, r0
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__fp_round+0xc>
    12e4:	88 23       	and	r24, r24
    12e6:	52 f0       	brmi	.+20     	; 0x12fc <__fp_round+0x20>
    12e8:	bb 0f       	add	r27, r27
    12ea:	40 f4       	brcc	.+16     	; 0x12fc <__fp_round+0x20>
    12ec:	bf 2b       	or	r27, r31
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__fp_round+0x18>
    12f0:	60 ff       	sbrs	r22, 0
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <__fp_round+0x20>
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	08 95       	ret

000012fe <__fp_split3>:
    12fe:	57 fd       	sbrc	r21, 7
    1300:	90 58       	subi	r25, 0x80	; 128
    1302:	44 0f       	add	r20, r20
    1304:	55 1f       	adc	r21, r21
    1306:	59 f0       	breq	.+22     	; 0x131e <__fp_splitA+0x10>
    1308:	5f 3f       	cpi	r21, 0xFF	; 255
    130a:	71 f0       	breq	.+28     	; 0x1328 <__fp_splitA+0x1a>
    130c:	47 95       	ror	r20

0000130e <__fp_splitA>:
    130e:	88 0f       	add	r24, r24
    1310:	97 fb       	bst	r25, 7
    1312:	99 1f       	adc	r25, r25
    1314:	61 f0       	breq	.+24     	; 0x132e <__fp_splitA+0x20>
    1316:	9f 3f       	cpi	r25, 0xFF	; 255
    1318:	79 f0       	breq	.+30     	; 0x1338 <__fp_splitA+0x2a>
    131a:	87 95       	ror	r24
    131c:	08 95       	ret
    131e:	12 16       	cp	r1, r18
    1320:	13 06       	cpc	r1, r19
    1322:	14 06       	cpc	r1, r20
    1324:	55 1f       	adc	r21, r21
    1326:	f2 cf       	rjmp	.-28     	; 0x130c <__fp_split3+0xe>
    1328:	46 95       	lsr	r20
    132a:	f1 df       	rcall	.-30     	; 0x130e <__fp_splitA>
    132c:	08 c0       	rjmp	.+16     	; 0x133e <__fp_splitA+0x30>
    132e:	16 16       	cp	r1, r22
    1330:	17 06       	cpc	r1, r23
    1332:	18 06       	cpc	r1, r24
    1334:	99 1f       	adc	r25, r25
    1336:	f1 cf       	rjmp	.-30     	; 0x131a <__fp_splitA+0xc>
    1338:	86 95       	lsr	r24
    133a:	71 05       	cpc	r23, r1
    133c:	61 05       	cpc	r22, r1
    133e:	08 94       	sec
    1340:	08 95       	ret

00001342 <__fp_zero>:
    1342:	e8 94       	clt

00001344 <__fp_szero>:
    1344:	bb 27       	eor	r27, r27
    1346:	66 27       	eor	r22, r22
    1348:	77 27       	eor	r23, r23
    134a:	cb 01       	movw	r24, r22
    134c:	97 f9       	bld	r25, 7
    134e:	08 95       	ret

00001350 <__udivmodhi4>:
    1350:	aa 1b       	sub	r26, r26
    1352:	bb 1b       	sub	r27, r27
    1354:	51 e1       	ldi	r21, 0x11	; 17
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <__udivmodhi4_ep>

00001358 <__udivmodhi4_loop>:
    1358:	aa 1f       	adc	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	a6 17       	cp	r26, r22
    135e:	b7 07       	cpc	r27, r23
    1360:	10 f0       	brcs	.+4      	; 0x1366 <__udivmodhi4_ep>
    1362:	a6 1b       	sub	r26, r22
    1364:	b7 0b       	sbc	r27, r23

00001366 <__udivmodhi4_ep>:
    1366:	88 1f       	adc	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	5a 95       	dec	r21
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__udivmodhi4_loop>
    136e:	80 95       	com	r24
    1370:	90 95       	com	r25
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
